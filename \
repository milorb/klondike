import random
import pygame
from pygame import Rect, Vector2, image, sprite, transform
from card import Card, CardAssets
from input import InputManager

class Board:
    """
    main gameplay scene layout:
    |[draw][dump]      [pile][pile][pile][pile]
    |[tab0][tab1][tab2][tab3][tab4][tab5][tab6]
    |
    |     
    """
    
    card_offset = 5
    draw_pile_loc = Vector2(22 + card_offset, 16 + card_offset)

    tableau_loc = [Vector2((22 + 5 + (i * (75 + 12))) * 2, (130 + 5) * 2) for i in range(7)]


    def __init__(self):

        random.seed()

        self.ranks = ['A', 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K']
        self.suits = ["heart", "spade", "diamond", "club"]

        self.deck = [(rank, suit) for rank in self.ranks for suit in self.suits]

        card_assets = CardAssets()

        self.card_back = transform.scale_by(card_assets.card_back, 2)
        self.card_images = card_assets.get_cards(self.ranks, self.suits, scale=2)

        self.tableaux = [Tableau(pos) for pos in self.tableau_loc]

        random.shuffle(self.deck)

    def get_card_from_deck(self):
        if self.deck:
            rank_and_suit = self.deck.pop(-1)
            rank = rank_and_suit[0]
            suit = rank_and_suit[1]

            card = self.card_images[rank][suit]

            return card

    def update(self):
        for tab in self.tableaux:
            tab.update()

    def draw(self, screen):
        for tab in self.tableaux:
            tab.draw(screen)


        
class DrawPile(sprite.LayeredUpdates):
    def __init__(self, *sprites, pos, w, h):
        super().__init__(*sprites)

        self.pos: pygame.Vector2
        self.rect = Rect(pos.x, pos.y, w, h)

    def update(self):
        if InputManager.MOUSE_LEFT_DOWN \
            and self.rect.collidepoint(InputManager.cursor_pos):

            if self.sprites:
                self.draw_card()

            else:
                self.reshuffle()

    def draw_card(self):
        pass 

    def reshuffle(self):
        pass

class Tableau(sprite.LayeredUpdates):
    def __init__(self, pos):
        super().__init__()

        self.pos = pos

    def update(self):
        super().update(InputManager.cursor_pos)

        cursor = InputManager.cursor_pos
        rel_cursor = InputManager.cursor_rel_pos

        left_clicked = InputManager.MOUSE_LEFT_DOWN()
        left_lifted = InputManager.MOUSE_LEFT_UP()


        y_offset = 0
        sprites = self.sprites()

        if left_lifted:
            print("deselect cards")
            for card in sprites:
                card.selected = False

        for card in sprites:
            if not card.selected:
                card.rect.x = self.pos.x
                card.rect.y = self.pos.y + y_offset
            else:
                card.rect.move_ip(pygame.mouse.get_rel())
            y_offset += 24

        card_idx = len(sprites) - 1
        clicked_idx = -1


        if left_clicked:
            for card in reversed(sprites):
                if not card.faceup and card.rect.collidepoint(cursor):
                    clicked_idx = card_idx
                    break
                    
                card_idx -= 1

            if clicked_idx != -1:
                for i in range(clicked_idx, len(sprites)):
                    sprites[i].selected = True


